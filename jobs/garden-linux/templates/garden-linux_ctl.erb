#!/bin/bash -e

RUN_DIR=/var/vcap/sys/run/garden-linux
LOG_DIR=/var/vcap/sys/log/garden-linux
PIDFILE=$RUN_DIR/garden-linux.pid
DATA_DIR=/var/vcap/data/garden-linux

source /var/vcap/packages/pid_utils/pid_utils.sh

case $1 in

  start)
    pid_guard $PIDFILE "garden-linux"
    if (( $(pidof garden-linux) )); then
      echo "$(date) garden-linux is already running, please stop it first"
      exit 1
    fi

    mkdir -p $RUN_DIR
    mkdir -p $DATA_DIR
    mkdir -p $LOG_DIR

    <% if p("diego.garden-linux.kernel_network_tuning_enabled") == true %>
    # Use default local port range (higher ports are used for pooling)
    echo 32768 61000 > /proc/sys/net/ipv4/ip_local_port_range
    <% end %>

    depot=$DATA_DIR/depot

    mkdir -p $depot

    ulimit -n 65536

    echo $$ > $PIDFILE

    export PATH=/var/vcap/packages/shadow/sbin:$PATH
    export PATH=/var/vcap/packages/iptables/sbin:$PATH
    export PATH=/var/vcap/packages/btrfs-progs/bin:$PATH

    graph_path=/var/vcap/data/garden/graph

    <% if p("diego.garden-linux.mount_btrfs_loopback") %>
      backing_store=/var/vcap/data/garden/garden_graph_backing_store
      loopback_device=/dev/garden_graph_root
      mount_point=$graph_path

      if [ ! -f $backing_store ]
      then
        echo "no backing store found at ${backing_store}: creating"
        dd if=/dev/zero of=$backing_store bs=1M count=<%= p('diego.garden-linux.btrfs_store_size_mb') %>
        rm -f $loopback_device
        mknod $loopback_device b 7 200
        losetup $loopback_device $backing_store
        mkfs.btrfs $backing_store
      else
        echo "backing store already exists, skipping creation"
      fi

      if cat /proc/mounts | grep $mount_point
      then
        echo "btrfs already mounted at $mount_point"
      else
        echo "mounting btrfs volume"
        mkdir -p $mount_point
        mount -t btrfs $loopback_device $mount_point
      fi
    <% end %>

    exec /var/vcap/packages/garden-linux/bin/garden-linux \
      -disableQuotas=<%= !p("diego.garden-linux.disk_quota_enabled") %> \
      -listenNetwork=<%= p("diego.garden-linux.listen_network") %> \
      -listenAddr=<%= p("diego.garden-linux.listen_address") %> \
      -denyNetworks=<%= p("diego.garden-linux.deny_networks").join(",") %> \
      -allowNetworks=<%= p("diego.garden-linux.allow_networks").join(",") %> \
      -debugAddr=<%= p("diego.garden-linux.debug_addr") %> \
      -bin=/var/vcap/packages/garden-linux/garden-bin \
      -depot=/var/vcap/data/garden-linux/depot \
      -graph=$graph_path \
      -containerGraceTime=1h \
      -portPoolSize=4534 \
      <% if_p("diego.garden-linux.insecure_docker_registry_list") do |list| %> \
      -insecureDockerRegistryList=<%= list.join(',') %> \
      <% end %> \
      2> >(tee -a $LOG_DIR/garden_linux.stderr.log | logger -p user.error -t vcap.garden-linux) \
      1> >(tee -a $LOG_DIR/garden_linux.stdout.log | logger -p user.info -t vcap.garden-linux)

    ;;

  stop)
    kill_and_wait $PIDFILE

    ;;

  *)
    echo "Usage: garden-linux_ctl {start|stop}"

    ;;

esac
